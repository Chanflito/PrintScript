@startuml

interface AST {
    -tokenPosition
}

interface Expression implements Statement

class IdentifierNode implements Operand {
    -name: String
    -tokenPosition: TokenPosition
}

interface Statement implements AST

interface Type <T> implements AST

interface Literal<T> implements Operand {
    -nodeType: NodeType
    -value: T
}

class StringLiteralNode implements Literal {
    -value: String
    -tokenPosition: TokenPosition
    -nodeType: NodeType = StringNodeType
}

class NumberLiteralNode implements Literal {
    -value: String,
    -tokenPosition: TokenPosition,
}

class BooleanLiteralNode implements Literal {
    -value: String,
    -tokenPosition: TokenPosition,
}

interface Keyword implements AST {
    -value: String
}

class LetKeyword implements Keyword {
    -value: String = "let"
}

class ConstKeyword implements Keyword {
    -value: String = "const"
}

interface Declaration implements Statement {
    -keyword: Keyword
    -identifier: IdentifierNode
    -nodeType: NodeType
}

class DeclarationNode implements Declaration {
     -keyword: Keyword
     -tokenPosition: TokenPosition
     -nodeType: NodeType
     -identifierNode: IdentifierNode
}

interface Assignation implements Statement {
    -expression: Expression
}

class ReAssignationNode implements Assignation {
    -tokenPosition: TokenPosition
    -expression: Expression
    -identifierNode: IdentifierNode
}

class DeclarationAssignationNode implements Assignation, Declaration {
    -keyword: Keyword
    -tokenPosition: TokenPosition
    -nodeType: NodeType
    -identifierNode: IdentifierNode
    -expression: Expression
}

interface Operator implements Expression {
    -operatorNodeType: OperatorNodeType
    -left: Expression
    -right: Expression
}
interface Operand implements Expression

interface Function implements AST

class MultiplyNode implements Operator {
    -tokenPosition: TokenPosition
    -left: Expression
    -right: Expression
}

class DivideNode implements Operator {
    -tokenPosition: TokenPosition
    -left: Expression
    -right: Expression
}

class SumNode implements Operator {
    -tokenPosition: TokenPosition
    -left: Expression
    -right: Expression
}

class SubtractNode implements Operator {
    -tokenPosition: TokenPosition
    -left: Expression
    -right: Expression
}

class BooleanNodeType implements Type
class StringNodeType implements Type
class NumberNodeType implements Type

class PrintlnNode implements Function {
    -tokenPosition: TokenPosition
    -expression: Expression
}

class ReadInputNode implements Function, Expression {
    -tokenPosition: TokenPosition
    -expression: Expression
}

class ReadEnvNode implements Function, Expression {
    -tokenPosition: TokenPosition
    -expression: Expression
}

interface ControlStatement implements Statement

class IfStatementNode implements ControlStatement{
    -tokenPosition
    -condition: Expression
    -ifBlock: BlockNode
}

class IfElseStatementNode implements ControlStatement {
    -tokenPosition
    -condition: Expression
    -ifBlock: BlockNode
    -elseBlock:BlockNode
}

class BlockNode implements Statement {
    -tokenPosition
    -children: List<AST>
}

interface OperatorNodeType
class SumOperatorNode implements OperatorNodeType
class DivideOperatorNode implements OperatorNodeType
class MultiplyOperatorNode implements OperatorNodeType
class SubtractOperatorNode implements OperatorNodeType

@enduml
